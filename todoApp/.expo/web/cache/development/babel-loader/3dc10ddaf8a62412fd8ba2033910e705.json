{"ast":null,"code":"import Modal from \"react-native-web/dist/exports/Modal\";\nimport { ModalButton, ModalContainer, ModalView, StyledInput, ModalAction, ModalActionGroup, ModalIcon, HeaderTitle, colors } from \"./../styles/appStyles\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar InputModal = function InputModal(_ref) {\n  var modalVisible = _ref.modalVisible,\n      setModalVisible = _ref.setModalVisible,\n      todoInputValue = _ref.todoInputValue,\n      setTodoInputValue = _ref.setTodoInputValue,\n      handleAddTodo = _ref.handleAddTodo;\n\n  var handleCloseModal = function handleCloseModal() {\n    setModalVisible(false);\n  };\n\n  var handleSubmit = function handleSubmit() {\n    handleAddTodo({\n      title: todoInputValue,\n      date: new Date().toUTCString(),\n      key: '${(todos[todos.length-1] && parseInt(todos[todos.length - 1].key) +1 || 1}'\n    });\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(ModalButton, {\n      onPress: function onPress() {\n        setModalVisible(true);\n      },\n      children: _jsx(AntDesign, {\n        name: \"plus\",\n        size: 30,\n        color: colors.secondary\n      })\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: handleCloseModal,\n      children: _jsx(ModalContainer, {\n        children: _jsxs(ModalView, {\n          children: [_jsxs(ModalIcon, {\n            children: [_jsx(HeaderTitle, {\n              children: \"Todos\"\n            }), _jsx(AntDesign, {\n              name: \"edit\",\n              size: 30,\n              color: colors.tertiary\n            })]\n          }), _jsx(StyledInput, {\n            placeholder: \"Add a todo\",\n            placeholderTextColor: colors.alternative,\n            selectionColor: colors.secondary,\n            autoFocus: true,\n            onChangeText: function onChangeText(text) {\n              return setTodoInputValue(text);\n            },\n            value: todoInputValue,\n            onSubmitEditing: handleSubmit\n          }), _jsxs(ModalActionGroup, {\n            children: [_jsx(ModalAction, {\n              color: colors.primary,\n              onPress: handleCloseModal,\n              children: _jsx(AntDesign, {\n                name: \"close\",\n                size: 28,\n                color: colors.secondary\n              })\n            }), _jsx(ModalAction, {\n              color: colors.tertiary,\n              onPress: handleSubmit,\n              children: _jsx(AntDesign, {\n                name: \"check\",\n                size: 28,\n                color: colors.secondary\n              })\n            })]\n          })]\n        })\n      })\n    })]\n  });\n};\n\nexport default InputModal;","map":{"version":3,"sources":["C:/Windows/System32/todoApp/components/InputModal.js"],"names":["ModalButton","ModalContainer","ModalView","StyledInput","ModalAction","ModalActionGroup","ModalIcon","HeaderTitle","colors","AntDesign","InputModal","modalVisible","setModalVisible","todoInputValue","setTodoInputValue","handleAddTodo","handleCloseModal","handleSubmit","title","date","Date","toUTCString","key","secondary","tertiary","alternative","text","primary"],"mappings":";AACA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,SAHJ,EAIIC,WAJJ,EAKIC,WALJ,EAMIC,gBANJ,EAOIC,SAPJ,EAQIC,WARJ,EASIC,MATJ;AAWA,SAAQC,SAAR,QAAwB,oBAAxB;;;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAuF;AAAA,MAArFC,YAAqF,QAArFA,YAAqF;AAAA,MAAvEC,eAAuE,QAAvEA,eAAuE;AAAA,MAAtDC,cAAsD,QAAtDA,cAAsD;AAAA,MAAtCC,iBAAsC,QAAtCA,iBAAsC;AAAA,MAAnBC,aAAmB,QAAnBA,aAAmB;;AAElG,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC3BJ,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GAFD;;AAIA,MAAMK,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvBF,IAAAA,aAAa,CAAC;AACVG,MAAAA,KAAK,EAAEL,cADG;AAEVM,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFI;AAGVC,MAAAA,GAAG,EAAE;AAHK,KAAD,CAAb;AAOH,GARD;;AAUJ,SACI;AAAA,eACI,KAAC,WAAD;AAAa,MAAA,OAAO,EAAE,mBAAM;AAACV,QAAAA,eAAe,CAAC,IAAD,CAAf;AAAsB,OAAnD;AAAA,gBACI,KAAC,SAAD;AAAW,QAAA,IAAI,EAAC,MAAhB;AAAuB,QAAA,IAAI,EAAE,EAA7B;AAAiC,QAAA,KAAK,EAAEJ,MAAM,CAACe;AAA/C;AADJ,MADJ,EAKI,KAAC,KAAD;AACI,MAAA,aAAa,EAAC,OADlB;AAEI,MAAA,WAAW,EAAE,IAFjB;AAGI,MAAA,OAAO,EAAEZ,YAHb;AAII,MAAA,cAAc,EAAEK,gBAJpB;AAAA,gBAMI,KAAC,cAAD;AAAA,kBACI,MAAC,SAAD;AAAA,qBACI,MAAC,SAAD;AAAA,uBACI,KAAC,WAAD;AAAA;AAAA,cADJ,EAEI,KAAC,SAAD;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAuB,cAAA,IAAI,EAAE,EAA7B;AAAiC,cAAA,KAAK,EAAER,MAAM,CAACgB;AAA/C,cAFJ;AAAA,YADJ,EAMI,KAAC,WAAD;AACI,YAAA,WAAW,EAAC,YADhB;AAEI,YAAA,oBAAoB,EAAEhB,MAAM,CAACiB,WAFjC;AAGI,YAAA,cAAc,EAAEjB,MAAM,CAACe,SAH3B;AAII,YAAA,SAAS,EAAE,IAJf;AAKI,YAAA,YAAY,EAAE,sBAACG,IAAD;AAAA,qBAAUZ,iBAAiB,CAACY,IAAD,CAA3B;AAAA,aALlB;AAMI,YAAA,KAAK,EAAEb,cANX;AAOI,YAAA,eAAe,EAAEI;AAPrB,YANJ,EAgBI,MAAC,gBAAD;AAAA,uBACI,KAAC,WAAD;AAAa,cAAA,KAAK,EAAET,MAAM,CAACmB,OAA3B;AAAoC,cAAA,OAAO,EAAEX,gBAA7C;AAAA,wBACI,KAAC,SAAD;AAAW,gBAAA,IAAI,EAAC,OAAhB;AAAwB,gBAAA,IAAI,EAAE,EAA9B;AAAkC,gBAAA,KAAK,EAAER,MAAM,CAACe;AAAhD;AADJ,cADJ,EAII,KAAC,WAAD;AAAa,cAAA,KAAK,EAAEf,MAAM,CAACgB,QAA3B;AAAqC,cAAA,OAAO,EAAEP,YAA9C;AAAA,wBACI,KAAC,SAAD;AAAW,gBAAA,IAAI,EAAC,OAAhB;AAAwB,gBAAA,IAAI,EAAE,EAA9B;AAAkC,gBAAA,KAAK,EAAET,MAAM,CAACe;AAAhD;AADJ,cAJJ;AAAA,YAhBJ;AAAA;AADJ;AANJ,MALJ;AAAA,IADJ;AA2CH,CA3DD;;AA6DA,eAAeb,UAAf","sourcesContent":["import { Modal } from \"react-native\";\r\nimport {\r\n    ModalButton,\r\n    ModalContainer,\r\n    ModalView,\r\n    StyledInput,\r\n    ModalAction,\r\n    ModalActionGroup,\r\n    ModalIcon,\r\n    HeaderTitle,\r\n    colors\r\n} from './../styles/appStyles';\r\nimport {AntDesign} from '@expo/vector-icons';\r\n\r\nconst InputModal = ({modalVisible, setModalVisible, todoInputValue, setTodoInputValue, handleAddTodo}) => {\r\n\r\n        const handleCloseModal = () => {\r\n            setModalVisible(false);\r\n        };\r\n\r\n        const handleSubmit = () => {\r\n            handleAddTodo({\r\n                title: todoInputValue,\r\n                date: new Date().toUTCString(),\r\n                key: '${(todos[todos.length-1] && parseInt(todos[todos.length - 1].key) +1 || 1}'\r\n            });\r\n\r\n            \r\n        };\r\n\r\n    return (\r\n        <>\r\n            <ModalButton onPress={() => {setModalVisible(true)}}>\r\n                <AntDesign name=\"plus\" size={30} color={colors.secondary}/>\r\n            </ModalButton>\r\n\r\n            <Modal\r\n                animationType=\"slide\"\r\n                transparent={true}\r\n                visible={modalVisible}\r\n                onRequestClose={handleCloseModal}\r\n            >\r\n                <ModalContainer>\r\n                    <ModalView>\r\n                        <ModalIcon>\r\n                            <HeaderTitle>Todos</HeaderTitle>\r\n                            <AntDesign name=\"edit\" size={30} color={colors.tertiary}/>\r\n                        </ModalIcon>\r\n                        \r\n                        <StyledInput\r\n                            placeholder=\"Add a todo\"\r\n                            placeholderTextColor={colors.alternative}\r\n                            selectionColor={colors.secondary}\r\n                            autoFocus={true}\r\n                            onChangeText={(text) => setTodoInputValue(text)}\r\n                            value={todoInputValue}\r\n                            onSubmitEditing={handleSubmit}\r\n                        />\r\n\r\n                        <ModalActionGroup>\r\n                            <ModalAction color={colors.primary} onPress={handleCloseModal}>\r\n                                <AntDesign name=\"close\" size={28} color={colors.secondary}/>\r\n                            </ModalAction>\r\n                            <ModalAction color={colors.tertiary} onPress={handleSubmit}>\r\n                                <AntDesign name=\"check\" size={28} color={colors.secondary}/>\r\n                            </ModalAction>\r\n                        </ModalActionGroup>\r\n                    </ModalView>\r\n\r\n                </ModalContainer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InputModal;"]},"metadata":{},"sourceType":"module"}