{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { SwipeListView } from \"react-native-swipe-list-view\";\nimport { ListView, ListViewHidden, TodoText, TodoDate, HiddenButton, SwipedTodoText, colors } from \"../styles/appStyles\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ListItems = function ListItems(_ref) {\n  var todos = _ref.todos,\n      setTodos = _ref.setTodos,\n      handleTriggerEdit = _ref.handleTriggerEdit;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      swipedRow = _useState2[0],\n      setSwipedRow = _useState2[1];\n\n  var handleDeleteTodo = function handleDeleteTodo(rowMap, rowKey) {\n    var newTodos = _toConsumableArray(todos);\n\n    var todoIndex = todos.findIndex(function (todo) {\n      return todo.key === rowKey;\n    });\n    newTodos.splice(todoIndex, 1);\n    setTodos(newTodos);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [todos.lenght == 0 && _jsx(TodoText, {\n      children: \"You have no todos today\"\n    }), todos.lenght != 0 && _jsx(SwipeListView, {\n      data: todos,\n      renderItem: function renderItem(data) {\n        var RowText = data.item.key == swipedRow ? SwipedTodoText : TodoText;\n        return _jsx(ListView, {\n          underlayColor: colors.primary,\n          onPress: function onPress() {\n            handleTriggerEdit(data.item);\n          },\n          children: _jsxs(_Fragment, {\n            children: [_jsx(RowText, {\n              children: data.item.title\n            }), _jsx(TodoDate, {\n              children: data.item.date\n            })]\n          })\n        });\n      },\n      renderHiddenItem: function renderHiddenItem(data, rowMap) {\n        return _jsx(ListViewHidden, {\n          children: _jsx(HiddenButton, {\n            onPress: function onPress() {\n              return handleDeleteTodo(rowMap, data.item.key);\n            },\n            children: _jsx(Entypo, {\n              name: \"trash\",\n              size: 25,\n              color: colors.secondary\n            })\n          })\n        });\n      },\n      leftOpenValue: 80,\n      previewRowKey: 1,\n      previewOpenValue: 80,\n      previewOpenDelay: 3000,\n      disableLeftSwipe: true,\n      showsVerticalScrollIndicator: false,\n      style: {\n        flex: 1,\n        paddingBottom: 30,\n        marginBottom: 40\n      },\n      onRowOpen: function onRowOpen() {\n        setSwipedRow(rowKey);\n      },\n      onRowClose: function onRowClose() {\n        setSwipedRow(null);\n      }\n    })]\n  });\n};\n\nexport default ListItems;","map":{"version":3,"sources":["C:/Windows/System32/todoApp/components/ListItems.js"],"names":["React","useState","SwipeListView","ListView","ListViewHidden","TodoText","TodoDate","HiddenButton","SwipedTodoText","colors","Entypo","ListItems","todos","setTodos","handleTriggerEdit","swipedRow","setSwipedRow","handleDeleteTodo","rowMap","rowKey","newTodos","todoIndex","findIndex","todo","key","splice","lenght","data","RowText","item","primary","title","date","secondary","flex","paddingBottom","marginBottom"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport { SwipeListView } from \"react-native-swipe-list-view\";\r\nimport {\r\n    ListView,\r\n    ListViewHidden,\r\n    TodoText,\r\n    TodoDate,\r\n    HiddenButton,\r\n    SwipedTodoText,\r\n    colors\r\n} from \"../styles/appStyles\";\r\nimport {Entypo} from \"@expo/vector-icons\";\r\n\r\n\r\n\r\nconst ListItems = ({todos, setTodos, handleTriggerEdit}) => {\r\n\r\n    const [swipedRow, setSwipedRow] = useState(null);\r\n\r\n    const handleDeleteTodo = (rowMap, rowKey) => {\r\n        const newTodos = [...todos];\r\n        const todoIndex = todos.findIndex((todo) => todo.key === rowKey);\r\n        newTodos.splice(todoIndex, 1);\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {todos.lenght == 0 && <TodoText>You have no todos today</TodoText>}\r\n        {todos.lenght != 0 && <SwipeListView\r\n            data={todos}\r\n            renderItem={(data) => {\r\n                const RowText = data.item.key == swipedRow ? SwipedTodoText : TodoText;\r\n                return(\r\n                    <ListView\r\n                        underlayColor={colors.primary}\r\n                        onPress={() =>{\r\n                            handleTriggerEdit(data.item)\r\n                            \r\n                        }}\r\n                    >\r\n                        <>\r\n                        <RowText>{data.item.title}</RowText>\r\n                        <TodoDate>{data.item.date}</TodoDate>\r\n                        </>\r\n                    </ListView>\r\n                )\r\n\r\n            }}\r\n            renderHiddenItem={(data, rowMap) => {\r\n                return(\r\n                    <ListViewHidden>\r\n                        <HiddenButton\r\n                            onPress={() => handleDeleteTodo(rowMap, data.item.key)}\r\n                        >\r\n                            <Entypo name=\"trash\" size={25} color={colors.secondary}/>\r\n                        </HiddenButton>\r\n                    </ListViewHidden>)\r\n            }}\r\n            leftOpenValue={80}\r\n            previewRowKey={1}\r\n            previewOpenValue={80}\r\n            previewOpenDelay={3000}\r\n            disableLeftSwipe={true}\r\n            showsVerticalScrollIndicator={false}\r\n            style={{\r\n                flex:1, paddingBottom: 30, marginBottom:40\r\n            }}\r\n            onRowOpen={() => {\r\n                setSwipedRow(rowKey);\r\n            }}\r\n            onRowClose={() => {\r\n                setSwipedRow(null);\r\n\r\n            }}\r\n\r\n\r\n        />} \r\n        </>\r\n    );    \r\n}\r\n\r\nexport default ListItems;"]},"metadata":{},"sourceType":"module"}